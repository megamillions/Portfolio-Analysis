#! python3
# basketPriceRecommendations.py - Suggest the amount of a stock to buy or sell,
# based on preset units within a basket.

import numpy as np
import os
import pandas as pd
import yfinance as yf

file_path = '.\\Reference\\%s'
file_name = 'stocks.csv'

# Dollar amount of single unit, taken as the sum of all expected sells.
# Recalculate on 2025-02-01 after completing disbursal of BWA.
ira_unit = 69.71
invest_unit = 38.46

ira_sell_unit = 20
invest_sell_unit = ira_sell_unit * 0.5

'''
# Use these formulations beginning 2025-02-01.
ira_approx_value = 59
inv_approx_value = 35
ira_pctg = ira_approx_value / (ira_approx_value + inv_approx_value)

# Move from thousands back to single dollars.
factor = 1000
ira_approx_value *= factor
inv_approx_value *= factor

# Divided by sample * 10, divided again by weekdays.
unit = ((ira_approx_value + inv_approx_value) / 300) / 5

# Mark manually those counting as a full basket, and others counting as half.
ira_sell_baskets = 10
inv_sell_baskets = 8.5

# Sell units at half the nominal unit rate.
sell_unit = unit * 0.5
ira_sell_unit = sell_unit * ira_pctg
inv_sell_unit = sell_unit * (1 - inv_pctg)

# Observe this from how the fractions are distributed on stocks.csv.
ira_buy_baskets = 4
inv_buy_baskets = 4

# Align buy units more or less to the amount generated by sells.
ira_buy_unit = (ira_sell_unit * ira_sell_baskets) / ira_buy_baskets
inv_buy_unit = (inv_sell_unit * inv_sell_baskets) / inv_buy_baskets

'''

df = pd.read_csv(os.path.abspath(file_path %
                                 file_name)).sort_values(by = 'TICKER')

def print_recommendations(df, recommendation, account,
                          account_action, shares_recommendation):
    
    print('\n%s the following for the %s account:\n' % (recommendation,
                                                        account))
    
    for n in range(len(df)):
        row = df.loc[n, :]
        
        if not np.isnan(row[account_action]):
            print('%s:' % (row['TICKER']),
                  '{:.3f}'.format(row[shares_recommendation]), 'shares at',
                  '${:.2f}.'.format(row['PRICE']))

    return

def recommend_amount(row):

    try:

        # Get the closing price.
        price = yf.Ticker(row['TICKER']).history().iloc[-1]['Close']
        
        invest_buy_share = shares_amount(invest_unit, row['INVEST_BUY'],
                                         price)
        ira_buy_share = shares_amount(ira_unit, row['IRA_BUY'],
                                      price)
        
        invest_sell_share = shares_amount(invest_sell_unit, row['INVEST_SELL'],
                                          price)
        ira_sell_share = shares_amount(ira_sell_unit, row['IRA_SELL'],
                                       price)
            
        return {'TICKER' : row['TICKER'],
                'PRICE' : price,
                'INVEST_BUY_SHARES' : invest_buy_share,
                'IRA_BUY_SHARES' : ira_buy_share,
                'INVEST_SELL_SHARES' : invest_sell_share,
                'IRA_SELL_SHARES' : ira_sell_share}
    
    except IndexError as e:
        print('Error encountered on %s: %s' % (row['TICKER'], e))

# Returns the amount of shares to buy or sell.
def shares_amount(units, basket_size, price):
    return units / basket_size / price if basket_size is not np.nan else basket_size

df = pd.merge(df, pd.DataFrame(list(df.apply(recommend_amount, axis = 1))),
              on = 'TICKER')

print_recommendations(df, 'BUY', 'INVESTMENT',
                      'INVEST_BUY', 'INVEST_BUY_SHARES')

print_recommendations(df, 'BUY', 'IRA',
                      'IRA_BUY', 'IRA_BUY_SHARES')

print_recommendations(df, 'SELL', 'INVESTMENT',
                      'INVEST_SELL', 'INVEST_SELL_SHARES')

print_recommendations(df, 'SELL', 'IRA',
                      'IRA_SELL', 'IRA_SELL_SHARES')

